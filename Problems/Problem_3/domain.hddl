(define (domain industrial_manufacturing)
	(:requirements
		:adl
		:negative-preconditions
		:conditional-effects
		:existential-preconditions
		:universal-preconditions
		:derived-predicates
		:typing
		:hierachie
	)

	(:types
		location quantity placeable - object
		work_station resizable supply - placeable
		valve bolt tool - supply
		robotic_agent container - resizable
		box carrier - container
		amr drone - robotic_agent
	)

	(:constants
		warehouse - location
	)

	(:predicates
		(adjacent ?l1 - location ?l2 - location)
		(at ?p - placeable ?l - location)

		(attached ?r - robotic_agent ?c - carrier)
		(detached ?r - robotic_agent)

		(loaded ?c - carrier ?b - box)

		(filled ?b - box ?s - supply)

		(empty ?c - container)

		(locked_supply ?s - supply)
		(locked_container ?c - container)

		(is_small ?r - resizable)
		(is_big ?r - resizable)

		(big_max_quantity ?q - quantity)
		(small_max_quantity ?q - quantity)
		(all_min_quantity ?q - quantity)

		(contained ?c - carrier ?q - quantity)
		(increased_by_1 ?q1 - quantity ?q2 - quantity)
		(decreased_by_1 ?q1 - quantity ?q2 - quantity)

		(delivered ?s - supply ?ws - work_station)
	)
	
	; ############################# TASKS #############################
	(:task t_deliver
		:parameters (?s - supply ?ws - work_station)
		:precondition ()
		:effect ()
	)

	(:task t_deliver_supply
		:parameters (?s - supply ?ws - work_station)
		:precondition ()
		:effect ()
	)

	(:task t_move
		:parameters (?r - robotic_agent ?l - location)
		:precondition ()
		:effect ()
	)

	(:task t_attach
		:parameters(?r - robotic_agent ?c - carrier)
		:precondition()
		:effect()
	)

	(:task t_detach
		:parameters(?r - robotic_agent ?c - carrier)
		:precondition()
		:effect()
	)

	(:task t_load
		:parameters(?r - robotic_agent ?b - box)
		:precondition()
		:effect()
	)

	(:task t_empty_carrier
		:parameters(?r - robotic_agent ?b - box)
		:precondition()
		:effect()
	)

	(:task t_fill
		:parameters(?r - robotic_agent ?b - box ?s - supply)
		:precondition()
		:effect()
	)

	(:task t_empty_box
		:parameters(?r - robotic_agent ?b - box)
		:precondition()
		:effect()
	)

	; ############################# METHODS #############################
	(:method m_deliver
		:parameters(?r - robotic_agent ?c - carrier ?b - box ?s - supply ?ws - work_station ?l1 - location ?l2 - location)
		:task (t_deliver ?s ?ws)
		:subtasks (and
			(task0 (deliver_supply ?r ?c ?b ?s ?ws ?l2))
		)
	)

	(:method m_deliver_supply
		:parameters (?r - robotic_agent ?c - carrier ?b - box ?s - supply ?ws - work_station ?l1 - location ?l2 - location)
		:task (t_deliver_supply ?s ?ws)
		:subtasks (and
			(task0 (t_move ?r ?l2))
			(task1 (t_deliver ?s ?ws))
		)
		:ordering (and
			(task0 < task1)
		)
	)

	(:method m_attach_load
		:parameters(?r - robotic_agent ?c - carrier ?b - box ?s - supply ?ws - work_station)
		:task (t_deliver_supply ?s ?ws)
		:subtasks (and
			(task0 (t_attach ?r ?c))
			(task1 (t_load ?r ?b))
			(task2 (t_fill ?r ?b ?s))
			(task3 (t_deliver_supply ?s ?ws))
		)
		:ordering (and
			(task0 < task1)
			(task1 < task2)
			(task2 < task3)
		)
	)

	(:method m_load_fill
		:parameters(?r - robotic_agent ?b - box ?s - supply ?ws - work_station)
		:task (t_deliver_supply ?s ?ws)
		:subtasks (and
			(task0 (t_load ?r ?b))
			(task1 (t_fill ?r ?b ?s))
			(task2 (t_deliver_supply ?s ?ws))
		)
		:ordering (and
			(task0 < task1)
			(task1 < task2)
		)
	)

	(:method m_refill_box
		:parameters(?r - robotic_agent ?c - carrier ?b - box ?s - supply ?ws - work_station ?l - location)
		:task (t_deliver_supply ?s ?ws)
		:subtasks (and
			(task0 (t_move ?r ?l))
			(task1 (t_fill ?r ?b ?s))
			(task2 (t_deliver_supply ?s ?ws))
		)
		:ordering (and
			(task0 < task1)
			(task1 < task2)
		)
	)

	(:method m_move
		:parameters (?r - robotic_agent ?c - carrier ?l1 - location ?l2 - location)
		:task (t_move ?r ?l2)
		:subtasks (and
			(task0 (move_robot ?r ?c ?l1 ?l2))
		)
	)

	(:method m_move_through
		:parameters (?r - robotic_agent ?c - carrier ?l2 - location ?l3 - location)
		:task (t_move ?r ?l3)
		:subtasks (and
			(task0 (t_move ?r ?l2))
			(task1 (move_robot ?r ?c ?l2 ?l3))
		)
		:ordering (and
			(task0 < task1)
		)
	)

	(:method m_already_there
		:parameters (?r - robotic_agent ?c - carrier ?l - location)
		:task (t_move ?r ?l)
		:subtasks (and
			(task0 (no_op ?r ?c ?l))
		)
	)

	(:method m_attach
		:parameters(?r - robotic_agent ?c - carrier ?l - location)
		:task (t_attach ?r ?c)
		:subtasks (and
			(task0 (attach_carrier ?r ?c ?l))
		)
	)

	(:method m_detach
		:parameters(?r - robotic_agent ?c - carrier ?l - location)
		:task (t_detach ?r ?c)
		:subtasks (and 
			(task0 (detach_carrier ?r ?c ?l))
		)
	)

	(:method m_load
		:parameters(?r - robotic_agent ?c - carrier ?b - box ?actual_q -quantity ?next_q - quantity ?l - location)
		:task (t_load ?r ?b)
		:subtasks (and
			(task0 (load_carrier ?r ?c ?b ?actual_q ?next_q ?l))
		)
	)
	
	(:method m_empty_carrier
		:parameters(?r - robotic_agent ?c - carrier ?b - box ?actual_q -quantity ?next_q - quantity ?l - location)
		:task (t_empty_carrier ?r ?b)
		:subtasks (and
			(task0 (empty_carrier ?r ?c ?b ?actual_q ?next_q ?l))
		)
	)

	(:method m_fill
		:parameters(?r - robotic_agent ?c - carrier ?b - box ?s - supply ?actual_q - quantity ?next_q - quantity ?l - location)
		:task (t_fill ?r ?b ?s)
		:subtasks (and
			(task0 (fill_box ?r ?c ?b ?s ?l))
		)
	)

	(:method m_empty_box
		:parameters(?r - robotic_agent ?c - carrier ?b - box ?s - supply ?l - location)
		:task (t_empty_box ?r ?b)
		:subtasks (and
			(task0 (empty_box ?r ?c ?b ?s))
		)
	)

	; ############################# ACTIONS #############################

	; Moves a robot between two locations, if it is not already there
	(:action move_robot
		:parameters (?r - robotic_agent ?c - carrier ?from - location ?to - location)
		:precondition (and
			(not (= ?from ?to))
			(adjacent ?from ?to)
			(at ?r ?from)
			(attached ?r ?c)
		)

		:effect (and
			(at ?r ?to)
			(not (at ?r ?from))
		)
	)

	; No operation action
	(:action no_op
		:parameters (?r - robotic_agent ?c - carrier ?l2 - location)
		:precondition
			(and
				(at ?r ?l2)
				(attached ?r ?c)
			)
		:effect ()
	)

	; Attaches a carrier to a robot
	(:action attach_carrier
		:parameters (?r - robotic_agent ?c - carrier ?l - location)
		:precondition (and
			(at ?r ?l)
			(at ?c ?l)
			(detached ?r)
			(not (locked_container ?c))

			; (compatible ?r ?c) - compatibility check
			(or
				(and 
					; we assume big robot can hold big and small carriers
					; more conditions can be added here to change the assumption
					(is_big ?r)
				)
				(and
					(is_small ?r)
					(is_small ?c)
				)
			)
		)

		:effect (and
			(attached ?r ?c)
			(not (detached ?r))
			(locked_container ?c)
			(not (at ?c ?l))
		)
	)

	; Detaches a carrier from a robot
	(:action detach_carrier
		:parameters (?r - robotic_agent ?c - carrier ?l - location)
		:precondition (and
			(at ?r ?l)
			(attached ?r ?c)
		)

		:effect (and
			(detached ?r)
			(not (attached ?r ?c))
			(not (locked_container ?c))
			(at ?c ?l)
		)
	)

	; Picks up a specific unloaded box and places it into the carrier
	(:action load_carrier
		:parameters (?r - robotic_agent ?c - carrier ?b - box ?actual_q ?next_q - quantity ?l - location)
		:precondition (and
			(at ?r ?l)
			(at ?b ?l)
			(attached ?r ?c)
			(empty ?c)
			(not (locked_container ?b))
			(contained ?c ?actual_q)
			(increased_by_1 ?actual_q ?next_q)
		)

		:effect (and
			(loaded ?c ?b)
			(locked_container ?b)
			(not (at ?b ?l))
			(contained ?c ?next_q)
			(not (contained ?c ?actual_q))

			(when
				(or 
					(and 
						(is_big ?c)
						(big_max_quantity ?next_q)
					)
					(and
						(is_small ?c)
						(small_max_quantity ?next_q)
					)
				)

				(and
					(not (empty ?c))
				)
			)
		)
	)

	; Puts down the loaded box
	(:action empty_carrier
		:parameters (?r - robotic_agent ?c - carrier ?b - box ?actual_q ?next_q - quantity ?l - location)
		:precondition (and
			(at ?r ?l)
			(attached ?r ?c)
			(loaded ?c ?b)
			(contained ?c ?actual_q)
			(decreased_by_1 ?actual_q ?next_q)
		)

		:effect (and
			(not (loaded ?c ?b))
			(not (locked_container ?b))
			(at ?b ?l)
			(contained ?c ?next_q)
			(not (contained ?c ?actual_q))

			(when
				(or
					(and
						(is_big ?c)
						(big_max_quantity ?next_q)
					)
					(and
						(is_small ?c)
						(small_max_quantity ?next_q)
					)
				)

				(and
					(empty ?c)
				)
			)
		)
	)

	; Fills a box with a specific supply
	(:action fill_box
		:parameters (?r - robotic_agent ?c - carrier ?b - box ?s - supply ?l - location)
		:precondition (and
			(at ?r ?l)
			(at ?s ?l)
			(attached ?r ?c)
			(loaded ?c ?b)
			(empty ?b)
			(not (locked_supply ?s))
		)

		:effect (and
			(filled ?b ?s)
			(not (empty ?b))
			(not (at ?s ?l))
			(locked_supply ?s)
		)
	)

	; Empties a box containing a specific supply
	(:action empty_box
		:parameters (?r - robotic_agent ?c - carrier ?b - box ?s - supply ?l - location)
		:precondition (and
			(at ?r ?l)
			(attached ?r ?c)
			(loaded ?c ?b)
			(filled ?b ?s)
		)

		:effect (and
			(empty ?b)
			(not (filled ?b ?s))
			(at ?s ?l)
			(not (locked_supply ?s))
		)
	)

	; Deliveries a specific supply to a specific work station
	(:action deliver_supply
		:parameters (?r - robotic_agent ?c - carrier ?b - box ?s - supply ?ws - work_station ?l - location)
		:precondition (and
			(not (delivered ?s ?ws))
			(at ?ws ?l)
			(at ?r ?l)
			(attached ?r ?c)
			(loaded ?c ?b)
			(filled ?b ?s)
		)

		:effect (and
			(delivered ?s ?ws)
			(empty ?b)
			(not (filled ?b ?s))
			(at ?s ?l)
			(not (locked_supply ?s))
		)
	)
)
